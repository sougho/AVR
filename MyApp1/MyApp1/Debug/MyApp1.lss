
MyApp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000b4  008000b4  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000326  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038f  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000019fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
  9a:	85 e3       	ldi	r24, 0x35	; 53
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_init>
  a2:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_test20x4>
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17
  aa:	0e 94 6d 01 	call	0x2da	; 0x2da <Servo_init>
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 67 00 	call	0xce	; 0xce <UART_print_line>
  b6:	fb cf       	rjmp	.-10     	; 0xae <main+0x1c>

000000b8 <UART_init>:
#include <stdio.h>
#include <inttypes.h>


void UART_init(unsigned int baud_rate) {
	UBRRH = (unsigned char) baud_rate >> 8;
  b8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baud_rate;
  ba:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = (1<<RXEN) | (1<<TXEN);
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = (1<<URSEL)  | (0 << USBS) | (3<<UCSZ0);
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	08 95       	ret

000000c6 <UART_send_char>:
}

void UART_send_char(unsigned char c) {
	while (!(UCSRA & (1<<UDRE)));
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <UART_send_char>
	UDR = c;
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <UART_print_line>:
}

void UART_print_line(char *line) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	
	while (*line != 0) {
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	31 f0       	breq	.+12     	; 0xe6 <UART_print_line+0x18>
  da:	21 96       	adiw	r28, 0x01	; 1
		UART_send_char(*line++);
  dc:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_send_char>
	UDR = c;
}

void UART_print_line(char *line) {
	
	while (*line != 0) {
  e0:	89 91       	ld	r24, Y+
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <UART_print_line+0xe>
		UART_send_char(*line++);
	}
	UART_send_char('\n');
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_send_char>
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_send_char>:
	LCD_send_char(0x06, 1);
}

void LCD_send_char(char p_byte, char cmd_or_data) {
	
	*port = (p_byte  >> 4);
  f2:	e0 91 b8 00 	lds	r30, 0x00B8
  f6:	f0 91 b9 00 	lds	r31, 0x00B9
  fa:	98 2f       	mov	r25, r24
  fc:	92 95       	swap	r25
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	90 83       	st	Z, r25
	
	if (cmd_or_data)
 102:	66 23       	and	r22, r22
 104:	41 f0       	breq	.+16     	; 0x116 <LCD_send_char+0x24>
		*port &= ~(1 << PIN_RS); // RS=0
 106:	e0 91 b8 00 	lds	r30, 0x00B8
 10a:	f0 91 b9 00 	lds	r31, 0x00B9
 10e:	90 81       	ld	r25, Z
 110:	9f 7b       	andi	r25, 0xBF	; 191
 112:	90 83       	st	Z, r25
 114:	07 c0       	rjmp	.+14     	; 0x124 <LCD_send_char+0x32>
	else
		*port |= (1 << PIN_RS); // RS=1
 116:	e0 91 b8 00 	lds	r30, 0x00B8
 11a:	f0 91 b9 00 	lds	r31, 0x00B9
 11e:	90 81       	ld	r25, Z
 120:	90 64       	ori	r25, 0x40	; 64
 122:	90 83       	st	Z, r25
	*port &= ~(1 << PIN_RW); // R/W=0
 124:	e0 91 b8 00 	lds	r30, 0x00B8
 128:	f0 91 b9 00 	lds	r31, 0x00B9
 12c:	90 81       	ld	r25, Z
 12e:	9f 7d       	andi	r25, 0xDF	; 223
 130:	90 83       	st	Z, r25
	
	*port |= (1 <<  PIN_EN); // EN = 1;
 132:	e0 91 b8 00 	lds	r30, 0x00B8
 136:	f0 91 b9 00 	lds	r31, 0x00B9
 13a:	90 81       	ld	r25, Z
 13c:	90 61       	ori	r25, 0x10	; 16
 13e:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	9a e0       	ldi	r25, 0x0A	; 10
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_send_char+0x50>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_send_char+0x56>
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
 148:	e0 91 b8 00 	lds	r30, 0x00B8
 14c:	f0 91 b9 00 	lds	r31, 0x00B9
 150:	90 81       	ld	r25, Z
 152:	9f 7e       	andi	r25, 0xEF	; 239
 154:	90 83       	st	Z, r25
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_send_char+0x68>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_send_char+0x6e>
 160:	00 00       	nop
	_delay_us(1000);
	
	*port = (*(in) & 0xf0) | (p_byte & 0x0f);
 162:	e0 91 b8 00 	lds	r30, 0x00B8
 166:	f0 91 b9 00 	lds	r31, 0x00B9
 16a:	a0 91 b4 00 	lds	r26, 0x00B4
 16e:	b0 91 b5 00 	lds	r27, 0x00B5
 172:	9c 91       	ld	r25, X
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	89 2b       	or	r24, r25
 17a:	80 83       	st	Z, r24
	else
		*port |= (1 << PIN_RS); // RS=1
	*port &= ~(1 << PIN_RW); // R/W=0
	*/
	
	*port |= (1 <<  PIN_EN); // EN = 1;
 17c:	e0 91 b8 00 	lds	r30, 0x00B8
 180:	f0 91 b9 00 	lds	r31, 0x00B9
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	80 83       	st	Z, r24
 18a:	fa e0       	ldi	r31, 0x0A	; 10
 18c:	fa 95       	dec	r31
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_send_char+0x9a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_send_char+0xa0>
	
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
 192:	e0 91 b8 00 	lds	r30, 0x00B8
 196:	f0 91 b9 00 	lds	r31, 0x00B9
 19a:	80 81       	ld	r24, Z
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9c e9       	ldi	r25, 0x9C	; 156
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_send_char+0xb2>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_send_char+0xb8>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <LCD_init>:
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	33 ed       	ldi	r19, 0xD3	; 211
 1b2:	40 e3       	ldi	r20, 0x30	; 48
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	30 40       	sbci	r19, 0x00	; 0
 1b8:	40 40       	sbci	r20, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <LCD_init+0x6>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_init+0x10>
 1be:	00 00       	nop
#define PIN_RW 5
#define PIN_RS 6

void LCD_init(volatile uint8_t *p_port) {
	_delay_ms(1000);
	port = p_port;
 1c0:	90 93 b9 00 	sts	0x00B9, r25
 1c4:	80 93 b8 00 	sts	0x00B8, r24
	ddr = p_port -1;
 1c8:	fc 01       	movw	r30, r24
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f0 93 b7 00 	sts	0x00B7, r31
 1d0:	e0 93 b6 00 	sts	0x00B6, r30
	in = p_port - 2;
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	90 93 b5 00 	sts	0x00B5, r25
 1da:	80 93 b4 00 	sts	0x00B4, r24
	*ddr = 0xff;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	*port &= ~(1 << PIN_EN);
 1e2:	e0 91 b8 00 	lds	r30, 0x00B8
 1e6:	f0 91 b9 00 	lds	r31, 0x00B9
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	80 83       	st	Z, r24
	LCD_send_char(0x33, 1);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	83 e3       	ldi	r24, 0x33	; 51
 1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	LCD_send_char(0x32, 1);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	LCD_send_char(0x2c, 1);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	8c e2       	ldi	r24, 0x2C	; 44
 204:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	LCD_send_char(0x0e, 1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	LCD_send_char(0x01, 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	LCD_send_char(0x06, 1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
 220:	08 95       	ret

00000222 <LCD_print_string>:
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
	_delay_ms(10);
}

void LCD_print_string(char* s) {
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
	while (*s != 0) {
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	39 f0       	breq	.+14     	; 0x23c <LCD_print_string+0x1a>
 22e:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_char(*s++, 0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	*port &= ~(1 << PIN_EN); // High to low to EN
	_delay_ms(10);
}

void LCD_print_string(char* s) {
	while (*s != 0) {
 236:	89 91       	ld	r24, Y+
 238:	81 11       	cpse	r24, r1
 23a:	fa cf       	rjmp	.-12     	; 0x230 <LCD_print_string+0xe>
		LCD_send_char(*s++, 0);
	}
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <LCD_gotoxy>:

void LCD_gotoxy(unsigned char x, unsigned char y) {
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <LCD_gotoxy+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <LCD_gotoxy+0x8>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char first_char_addr[] = {0x80, 0xc0, 0x94, 0xd4};
 24e:	90 e8       	ldi	r25, 0x80	; 128
 250:	99 83       	std	Y+1, r25	; 0x01
 252:	90 ec       	ldi	r25, 0xC0	; 192
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	94 e9       	ldi	r25, 0x94	; 148
 258:	9b 83       	std	Y+3, r25	; 0x03
 25a:	94 ed       	ldi	r25, 0xD4	; 212
 25c:	9c 83       	std	Y+4, r25	; 0x04
	LCD_send_char(first_char_addr[y-1] + x -1, 1);
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	fe 01       	movw	r30, r28
 262:	e6 0f       	add	r30, r22
 264:	f1 1d       	adc	r31, r1
 266:	90 81       	ld	r25, Z
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	89 0f       	add	r24, r25
 26c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e8       	ldi	r24, 0x8F	; 143
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_gotoxy+0x32>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_gotoxy+0x38>
 27a:	00 00       	nop
	_delay_us(100);
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <LCD_clear>:

void LCD_clear() {
	LCD_send_char(0x01, 1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_send_char>
 292:	08 95       	ret

00000294 <LCD_test20x4>:
}


void LCD_test20x4() {
	LCD_clear();
 294:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_clear>
	LCD_gotoxy(1,1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 21 01 	call	0x242	; 0x242 <LCD_gotoxy>
	LCD_print_string("Hattima Tim Tim");
 2a0:	86 e6       	ldi	r24, 0x66	; 102
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 11 01 	call	0x222	; 0x222 <LCD_print_string>
	LCD_gotoxy(1,2);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 21 01 	call	0x242	; 0x242 <LCD_gotoxy>
	LCD_print_string("Tara Mathe Pare Dim");
 2b0:	86 e7       	ldi	r24, 0x76	; 118
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 11 01 	call	0x222	; 0x222 <LCD_print_string>
	LCD_gotoxy(1,3);
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 21 01 	call	0x242	; 0x242 <LCD_gotoxy>
	LCD_print_string("Tader Khara 2to Sing");
 2c0:	8a e8       	ldi	r24, 0x8A	; 138
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 11 01 	call	0x222	; 0x222 <LCD_print_string>
	LCD_gotoxy(1,4);
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 21 01 	call	0x242	; 0x242 <LCD_gotoxy>
	LCD_print_string("Tara Hattima tim tim");
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 11 01 	call	0x222	; 0x222 <LCD_print_string>
 2d8:	08 95       	ret

000002da <Servo_init>:
#include "MeServo.h"

void Servo_init () {
	
	// Initialize timer 1 
	OCR1A = 97;
 2da:	81 e6       	ldi	r24, 0x61	; 97
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9b bd       	out	0x2b, r25	; 43
 2e0:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << COM1A1) | (1<< COM1A0) | (1<<WGM11);
 2e2:	8f b5       	in	r24, 0x2f	; 47
 2e4:	82 6c       	ori	r24, 0xC2	; 194
 2e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM10);
 2e8:	8f b5       	in	r24, 0x2f	; 47
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11) | (1<<CS12);
 2ee:	8e b5       	in	r24, 0x2e	; 46
 2f0:	8e 61       	ori	r24, 0x1E	; 30
 2f2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 4999;
 2f4:	87 e8       	ldi	r24, 0x87	; 135
 2f6:	93 e1       	ldi	r25, 0x13	; 19
 2f8:	97 bd       	out	0x27, r25	; 39
 2fa:	86 bd       	out	0x26, r24	; 38
	DDRD |= (1<<PD4) | (1<<PD5);
 2fc:	81 b3       	in	r24, 0x11	; 17
 2fe:	80 63       	ori	r24, 0x30	; 48
 300:	81 bb       	out	0x11, r24	; 17
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
