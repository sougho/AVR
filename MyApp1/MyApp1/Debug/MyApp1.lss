
MyApp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  00000324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f4  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023e  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000230  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015e  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Wait>:
  92:	22 e3       	ldi	r18, 0x32	; 50
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <Wait+0x8>
  9e:	fc 01       	movw	r30, r24
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <Wait+0xe>
  a4:	fc 01       	movw	r30, r24
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <Wait+0x14>
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	a9 f7       	brne	.-22     	; 0x98 <Wait+0x6>
  ae:	08 95       	ret

000000b0 <main>:
  b0:	0e 94 2f 01 	call	0x25e	; 0x25e <Servo_init>
  b4:	85 e3       	ldi	r24, 0x35	; 53
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_init>
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_print_string>
  c4:	82 e3       	ldi	r24, 0x32	; 50
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3d 01 	call	0x27a	; 0x27a <Servo_move>
  cc:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_print_string>
  d8:	8c e3       	ldi	r24, 0x3C	; 60
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 3d 01 	call	0x27a	; 0x27a <Servo_move>
  e0:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
  e4:	83 e6       	ldi	r24, 0x63	; 99
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_print_string>
  ec:	89 ea       	ldi	r24, 0xA9	; 169
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 3d 01 	call	0x27a	; 0x27a <Servo_move>
  f4:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
  f8:	87 e6       	ldi	r24, 0x67	; 103
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_print_string>
 100:	8a e3       	ldi	r24, 0x3A	; 58
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	0e 94 3d 01 	call	0x27a	; 0x27a <Servo_move>
 108:	0e 94 49 00 	call	0x92	; 0x92 <Wait>
 10c:	d7 cf       	rjmp	.-82     	; 0xbc <main+0xc>

0000010e <LCD_send_char>:
	LCD_send_char(0x06, 1);
}

void LCD_send_char(char p_byte, char cmd_or_data) {
	
	*port = (p_byte  >> 4);
 10e:	e0 91 70 00 	lds	r30, 0x0070
 112:	f0 91 71 00 	lds	r31, 0x0071
 116:	98 2f       	mov	r25, r24
 118:	92 95       	swap	r25
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	90 83       	st	Z, r25
	
	if (cmd_or_data)
 11e:	66 23       	and	r22, r22
 120:	41 f0       	breq	.+16     	; 0x132 <LCD_send_char+0x24>
		*port &= ~(1 << PIN_RS); // RS=0
 122:	e0 91 70 00 	lds	r30, 0x0070
 126:	f0 91 71 00 	lds	r31, 0x0071
 12a:	90 81       	ld	r25, Z
 12c:	9f 7b       	andi	r25, 0xBF	; 191
 12e:	90 83       	st	Z, r25
 130:	07 c0       	rjmp	.+14     	; 0x140 <LCD_send_char+0x32>
	else
		*port |= (1 << PIN_RS); // RS=1
 132:	e0 91 70 00 	lds	r30, 0x0070
 136:	f0 91 71 00 	lds	r31, 0x0071
 13a:	90 81       	ld	r25, Z
 13c:	90 64       	ori	r25, 0x40	; 64
 13e:	90 83       	st	Z, r25
	*port &= ~(1 << PIN_RW); // R/W=0
 140:	e0 91 70 00 	lds	r30, 0x0070
 144:	f0 91 71 00 	lds	r31, 0x0071
 148:	90 81       	ld	r25, Z
 14a:	9f 7d       	andi	r25, 0xDF	; 223
 14c:	90 83       	st	Z, r25
	
	*port |= (1 <<  PIN_EN); // EN = 1;
 14e:	e0 91 70 00 	lds	r30, 0x0070
 152:	f0 91 71 00 	lds	r31, 0x0071
 156:	90 81       	ld	r25, Z
 158:	90 61       	ori	r25, 0x10	; 16
 15a:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	9a e0       	ldi	r25, 0x0A	; 10
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_send_char+0x50>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_send_char+0x56>
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
 164:	e0 91 70 00 	lds	r30, 0x0070
 168:	f0 91 71 00 	lds	r31, 0x0071
 16c:	90 81       	ld	r25, Z
 16e:	9f 7e       	andi	r25, 0xEF	; 239
 170:	90 83       	st	Z, r25
 172:	ef e9       	ldi	r30, 0x9F	; 159
 174:	ff e0       	ldi	r31, 0x0F	; 15
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_send_char+0x68>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_send_char+0x6e>
 17c:	00 00       	nop
	_delay_us(1000);
	
	*port = (*(in) & 0xf0) | (p_byte & 0x0f);
 17e:	e0 91 70 00 	lds	r30, 0x0070
 182:	f0 91 71 00 	lds	r31, 0x0071
 186:	a0 91 6c 00 	lds	r26, 0x006C
 18a:	b0 91 6d 00 	lds	r27, 0x006D
 18e:	9c 91       	ld	r25, X
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	80 83       	st	Z, r24
	else
		*port |= (1 << PIN_RS); // RS=1
	*port &= ~(1 << PIN_RW); // R/W=0
	*/
	
	*port |= (1 <<  PIN_EN); // EN = 1;
 198:	e0 91 70 00 	lds	r30, 0x0070
 19c:	f0 91 71 00 	lds	r31, 0x0071
 1a0:	80 81       	ld	r24, Z
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	80 83       	st	Z, r24
 1a6:	fa e0       	ldi	r31, 0x0A	; 10
 1a8:	fa 95       	dec	r31
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_send_char+0x9a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_send_char+0xa0>
	
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
 1ae:	e0 91 70 00 	lds	r30, 0x0070
 1b2:	f0 91 71 00 	lds	r31, 0x0071
 1b6:	80 81       	ld	r24, Z
 1b8:	8f 7e       	andi	r24, 0xEF	; 239
 1ba:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9c e9       	ldi	r25, 0x9C	; 156
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_send_char+0xb2>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_send_char+0xb8>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <LCD_init>:
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	33 ed       	ldi	r19, 0xD3	; 211
 1ce:	40 e3       	ldi	r20, 0x30	; 48
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	40 40       	sbci	r20, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <LCD_init+0x6>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_init+0x10>
 1da:	00 00       	nop
#define PIN_RW 5
#define PIN_RS 6

void LCD_init(volatile uint8_t *p_port) {
	_delay_ms(1000);
	port = p_port;
 1dc:	90 93 71 00 	sts	0x0071, r25
 1e0:	80 93 70 00 	sts	0x0070, r24
	ddr = p_port -1;
 1e4:	fc 01       	movw	r30, r24
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f0 93 6f 00 	sts	0x006F, r31
 1ec:	e0 93 6e 00 	sts	0x006E, r30
	in = p_port - 2;
 1f0:	02 97       	sbiw	r24, 0x02	; 2
 1f2:	90 93 6d 00 	sts	0x006D, r25
 1f6:	80 93 6c 00 	sts	0x006C, r24
	*ddr = 0xff;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
	*port &= ~(1 << PIN_EN);
 1fe:	e0 91 70 00 	lds	r30, 0x0070
 202:	f0 91 71 00 	lds	r31, 0x0071
 206:	80 81       	ld	r24, Z
 208:	8f 7e       	andi	r24, 0xEF	; 239
 20a:	80 83       	st	Z, r24
	LCD_send_char(0x33, 1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	LCD_send_char(0x32, 1);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	LCD_send_char(0x2c, 1);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	8c e2       	ldi	r24, 0x2C	; 44
 220:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	LCD_send_char(0x0e, 1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	LCD_send_char(0x01, 1);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	LCD_send_char(0x06, 1);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
 23c:	08 95       	ret

0000023e <LCD_print_string>:
	_delay_us(2);
	*port &= ~(1 << PIN_EN); // High to low to EN
	_delay_ms(10);
}

void LCD_print_string(char* s) {
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	while (*s != 0) {
 244:	88 81       	ld	r24, Y
 246:	88 23       	and	r24, r24
 248:	39 f0       	breq	.+14     	; 0x258 <LCD_print_string+0x1a>
 24a:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_char(*s++, 0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_send_char>
	*port &= ~(1 << PIN_EN); // High to low to EN
	_delay_ms(10);
}

void LCD_print_string(char* s) {
	while (*s != 0) {
 252:	89 91       	ld	r24, Y+
 254:	81 11       	cpse	r24, r1
 256:	fa cf       	rjmp	.-12     	; 0x24c <LCD_print_string+0xe>
		LCD_send_char(*s++, 0);
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <Servo_init>:
#include "MeServo.h"

void Servo_init () {
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 25e:	8f b5       	in	r24, 0x2f	; 47
 260:	82 6a       	ori	r24, 0xA2	; 162
 262:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 264:	8e b5       	in	r24, 0x2e	; 46
 266:	8b 61       	ori	r24, 0x1B	; 27
 268:	8e bd       	out	0x2e, r24	; 46

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 26a:	87 e8       	ldi	r24, 0x87	; 135
 26c:	93 e1       	ldi	r25, 0x13	; 19
 26e:	97 bd       	out	0x27, r25	; 39
 270:	86 bd       	out	0x26, r24	; 38

	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
 272:	81 b3       	in	r24, 0x11	; 17
 274:	80 63       	ori	r24, 0x30	; 48
 276:	81 bb       	out	0x11, r24	; 17
 278:	08 95       	ret

0000027a <Servo_move>:
}

void Servo_move(int i) {
	OCR1A = i;
 27a:	9b bd       	out	0x2b, r25	; 43
 27c:	8a bd       	out	0x2a, r24	; 42
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
